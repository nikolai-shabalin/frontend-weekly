---
import FormattedDate from './FormattedDate.astro';

interface Props {
  posts: any[];
}

const { posts } = Astro.props;
type Group = { label: string; posts: any[] };
const groups: Group[] = [];

for (const post of posts) {
  const date: Date = post.data.pubDate;
  const monthName = date.toLocaleString('ru-RU', { month: 'long' });
  const label = `${monthName.charAt(0).toUpperCase()}${monthName.slice(1)} ${date.getFullYear()}`;

  const lastGroup = groups[groups.length - 1];
  if (!lastGroup || lastGroup.label !== label) {
    groups.push({ label, posts: [post] });
  } else {
    lastGroup.posts.push(post);
  }
}
---

<section class="posts">
  {
    groups.map((group) => (
      <div class="posts__group">
        <h2 class="posts__month">{group.label}</h2>
        <ul class="posts__list">
          {
          group.posts.map((post) => (
              <li class="short-post">
                <span class="post-tag">Дайджест</span>
                <a href={`/${post.slug}/`} class="short-post__link">
                  <h3 class="short-post__title" transition:name={`title-${post.slug}`}>{post.data.title}</h3>
                </a>
                <p class="short-post__date">
                  <FormattedDate date={post.data.pubDate} />
                </p>
                <p class="short-post__description">{post.data.description}</p>
              </li>
            ))
          }
        </ul>
      </div>
    ))
  }
</section>

<style>
  .posts__group + .posts__group {
    margin-top: var(--space-5xl);
  }

  .posts__month {
    margin: 0 0 var(--space-lg) 0;
    font-size: var(--text-2xl);
    line-height: 1.2;
    color: rgb(var(--black));
  }

  .posts__list {
    display: flex;
    flex-direction: column;
    gap: var(--space-3xl);
    list-style-type: none;
    margin: 0;
    padding: 0;
  }

  .short-post {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
    padding: var(--space-xl);
    margin-bottom: var(--space-3xl);
    background: rgba(var(--gray-light), 0.4);
    border: 1px solid rgba(var(--gray), 0.15);
    border-radius: 12px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 2px 4px rgba(var(--gray), 0.05);
  }

  .short-post:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 12px rgba(var(--gray), 0.15);
  }

  .short-post:not(:last-child) {
    border-bottom: none;
  }

  .short-post__link {
    display: block;
    text-decoration: none;
  }

  .short-post__link:hover {
    border-bottom: none;
  }

  .short-post__link:hover .short-post__title {
    color: var(--accent);
  }

  .short-post__title {
    font-size: var(--text-2xl);
    margin: 0 0 var(--space-sm) 0;
    color: rgb(var(--black));
    line-height: 1.2;
    transition: color 0.2s ease;
  }

  .post-tag {
    align-self: flex-start;
    font-size: var(--text-xs);
    font-weight: 600;
    color: rgb(var(--accent-dark));
    background: rgba(var(--accent), 0.15);
    padding: 0.2rem 0.6rem;
    border-radius: 999px;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: var(--space-sm);
  }

  .short-post__date {
    margin: 0 0 var(--space-lg) 0;
    color: rgb(var(--gray));
    font-size: var(--text-sm);
    font-style: italic;
    letter-spacing: 0.05em;
  }

  .short-post__description {
    margin: var(--space-md) 0 0 0;
    font-size: var(--text-md);
    line-height: 1.6;
    color: rgb(var(--gray-dark));
    max-width: var(--content-width);
  }

  @media (min-width: 720px) {
    .short-post__title {
      font-size: var(--text-3xl);
    }
  }
</style>
